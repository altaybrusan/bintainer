@page "/dashboard/order"
@using Bintainer.Model.Entity
@model OrderModel
@{
}
@Html.AntiForgeryToken()
<link rel="stylesheet" href="~/css/hierarchy-select.min.css">
<link rel="stylesheet" href="~/css/autocomplete.css">
<script src="~/js/jquery-customselect.js"></script>
<link href="~/css/jquery-customselect.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5/dist/js/bootstrap.bundle.min.js" type="module"></script>


<style>
::placeholder {
        font-size: 12px;
        font-style: italic;
}
.input-sharp {
        height: 30px; /* Reduced height */
        border-radius: 0; /* Sharp corners */
        border: 1px solid #ced4da; /* Custom border color */
        background-color: #ffffff; /* Background color */
        color: #002060; /* Text color */
}
.input-sharp:focus {
            border-color: #0062cc; /* Focus border color */
            box-shadow: 0 0 0 0.2rem rgba(0, 98, 204, 0.25); /* Focus glow effect */
}
.button-row {
        display: flex;
        align-items: center; /* Vertically center content */
        height: 30px; /* Set height to 30px */
}
.button-row .btn {
            border-radius: 0; /* Sharp corners for button */
            margin-right: 10px; /* Add margin between button and select */
            font-size: 14px; /* Reduce font size */
}
.button-row select {
            height: 100%; /* Fill the height of the .button-row */
            border-radius: 0; /* Sharp corners for select */
            border: none; /* Remove default border */
            padding: 5px; /* Adjust padding */
            font-size: 14px; /* Reduce font size */
            width: max-content; /* Fit width to content */
}
</style>


<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active" aria-current="page" id="create-order-tab" data-bs-toggle="tab" data-bs-target="#create-order" href="#">Create</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="search-order-tab" data-bs-toggle="tab" data-bs-target="#search-order" href="#">Search</a>
    </li>
</ul>

<div class="tab-content">
    <div id="create-order" class="tab-pane fade show active" role="tabpanel" aria-labelledby="create-order">
        <div class="card mt-3">
            <div class="card-header">
                <i class="fa fa-search"></i>&nbsp; Order Details
            </div>
            <div class="card-body">
                <form class="row">
                    <div class="col-md-9">
                        <div class="row align-items-center">
                            <div class="col-md-2">
                                <div class="row">
                                    <label for="orderNumber" class="form-label">Order number</label>
                                </div>
                                <div class="row">
                                    <label for="orderSupplier" class="form-label">Supplier</label>
                                </div>
                                <div class="row">
                                    <label for="orderDate" class="form-label mb-0">Order date</label>
                                </div>
                                <div class="row">
                                    <label for="handoverDate" class="form-label mb-0">Handover date</label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <input type="text" class="form-control input-sharp " id="orderNumber" placeholder="Order number">
                                <input type="text" class="form-control input-sharp" id="orderSupplier" placeholder="e.g., Digikey">
                                <input type="date" id="orderDate" name="orderDate" class="form-control input-sharp">
                                <input type="date" id="handoverDate" name="handoverDate" class="form-control input-sharp">
                            </div>
                        </div>                        
                    </div>
                </form>
            </div>
        </div>
        <div class="row">
            <div class="col-md-9">
                <div class="row col-12 mt-3">
                    <div class="col-12">
                        <table class="table" id="sectionlist">
                            <thead>
                                <tr>
                                    <th style="width:300px">Part name</th>
                                    <th style="width:150px;">Quantity</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="inventory-subsection-list">
                                    <td>
                                        <select class="form-select form-select-sm partSelect" required="required"
                                                asp-items="@(new SelectList(Model.Parts,nameof(Part.Id),nameof(Part.Number)))">
                                            <option value="">Select Part</option>
                                        </select>
                                    </td>
                                    <td>
                                        <input type="number" name="section-width" class="form-control input-sharp" min="0" placeholder="quantity">
                                    </td>
                                    <td>
                                        <button type="button" id="btnAdd" class="button-row btn btn-xs btn-primary classAdd">Add More</button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>

                        <div class="button-row align-items-end justify-content-end mt-5">
                            <button type="button" id="btnSubmit" class="button-row btn btn-primary btn-md pull-right btn-sm">Submit</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>          
        <br/>
        <script>
            $(function () {
                $("#standard").customselect();
             });
         </script>
    </div>
    <div id="search-order" class="tab-pane fade" role="tabpanel" aria-labelledby="update-tab">
        <div class="card mt-3">
            <div class="card-header">
                <i class="fa fa-search"></i>&nbsp; Search
            </div>
            <div class="card-body">
                <form class="row g-3">
                    <div class="col-md-6">
                        <div class="row align-items-center">
                            <div class="col-md-3">
                                <label for="searchOrderNumber" class="form-label">Order number</label>
                                <label for="searchSupplier" class="form-label">Supplier</label>
                            </div>
                            <div class="col-md-5">
                                <input type="text" class="form-control input-sharp " id="searchOrderNumber" placeholder="Order number">
                                <input type="text" class="form-control input-sharp" id="searchSupplier" placeholder="e.g., Digikey">
                            </div>
                        </div>
                        <div class="row align-items-center mt-3">
                            <div class="col-auto">
                                <label for="fromDate" class="form-label mb-0">From</label>
                            </div>
                            <div class="col-auto">
                                <input type="date" id="fromDate" name="fromDate" class="form-control input-sharp">
                            </div>
                            <div class="col-auto">
                                <label for="toDate" class="form-label mb-0">To</label>
                            </div>
                            <div class="col-auto">
                                <input type="date" id="toDate" name="toDate" class="form-control input-sharp">
                            </div>
                        </div>
                        <button type="button" id="searchOrderBtn" class="button-row btn btn-primary mt-3">Search</button>
                    </div>
                </form>
            </div>
        </div>
        <!-- HTML container to hold the search results -->
        <div id="order-results">
            <!-- Orders Table -->
            <table id="orders-table" class="table table-bordered">
                <thead>
                    <tr>
                        <th>Order Number</th>
                        <th>Supplier</th>
                        <th>Order Date</th>
                        <th>Handover Date</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Orders will be dynamically populated here -->
                </tbody>
            </table>

            <!-- Parts Table -->
            <table id="parts-table" class="table table-bordered" style="display: none;">
                <thead>
                    <tr>
                        <th>Part Name</th>
                        <th>Quantity</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Parts will be dynamically populated here -->
                </tbody>
            </table>

        </div>
    </div>
</div>


<script type="module">
    import Autocomplete from "https://cdn.jsdelivr.net/gh/lekoala/bootstrap5-autocomplete@master/autocomplete.js";
    const opts = {
        onSelectItem: console.log,
    };
    var src = [];
    for (let i = 0; i < 50; i++) {
        src.push({
            title: "Option " + i,
            id: "opt" + i,
            data: {
                key: i,
            },
        });
    }
    Autocomplete.init("input.autocomplete", {
        items: src,
        valueField: "id",
        labelField: "title",
        highlightTyped: true,
        onSelectItem: console.log,
    });
</script>

<script type="text/javascript">
    $(document).ready(function () {

        // Function to update the available options in all select dropdowns
        function updateSelectOptions() {
            // Collect all selected values from every dropdown
            var selectedItems = [];
            $('.partSelect').each(function () {
                var selectedValue = $(this).val();
                if (selectedValue) {
                    selectedItems.push(selectedValue);
                }
            });

            // Loop through each dropdown and update its options
            $('.partSelect').each(function () {
                var dropdown = $(this);
                dropdown.find('option').each(function () {
                    var optionValue = $(this).val();
                    // Disable or hide the option if it is selected in another dropdown
                    if (selectedItems.includes(optionValue) && dropdown.val() !== optionValue) {
                        $(this).prop('disabled', true); // Disable the option
                    } else {
                        $(this).prop('disabled', false); // Enable the option if not selected
                    }
                });
            });

            // Check if the "Add" button should be disabled
            checkIfAddButtonShouldBeDisabled();
        }

        // Function to check if the "Add" button should be disabled
        function checkIfAddButtonShouldBeDisabled() {
            var totalOptions = $('.partSelect:first option').length - 1; // Exclude the first empty option
            var selectedCount = $('.partSelect').length;

            // Disable the add button if all items are selected
            if (selectedCount >= totalOptions) {
                $('.classAdd').prop('disabled', true);
            } else {
                $('.classAdd').prop('disabled', false);
            }
        }

        // Handle adding a new row
        $(document).on("click", ".classAdd", function () {
            var rowCount = $('.inventory-subsection-list').length + 1;

            // Clone the first row's select dropdown
            var selectDropdown = $('.partSelect').first().clone();
            selectDropdown.removeAttr('id'); // Remove id to avoid duplicates
            selectDropdown.val(''); // Clear the selected value in the cloned select

            // Create a new row and append the cloned select and inputs
            var newRow = '<tr class="inventory-subsection-list">' +
                '<td></td>' + // Placeholder for the select
                '<td><input type="number" name="section-width' + rowCount + '" class="form-control input-sharp" min="0" placeholder="quantity"></td>' +
                '<td><div class="button-row"><button type="button" class="button-row btn btn-xs btn-primary classAdd">Add</button>' +
                '<button type="button" class="button-row btn deleteContact btn btn-danger btn-xs btnDelete">Remove</button></div></td>' +
                '</tr>';

            // Append the new row to the table
            $('#sectionlist tbody').append(newRow);

            // Append the cloned select dropdown into the new row
            $('#sectionlist tbody tr:last-child td:first-child').append(selectDropdown);

            // Update options in all select dropdowns
            updateSelectOptions();
        });

        // Handle removing a row
        $(document).on("click", ".btnDelete", function () {
            $(this).closest('tr').remove();
            updateSelectOptions(); // Recheck and update available options when a row is removed
        });

        // Handle when a select option is changed
        $(document).on("change", ".partSelect", function () {
            updateSelectOptions(); // Update available options when a new item is selected
        });

        // Initial check to disable the Add button if necessary
        checkIfAddButtonShouldBeDisabled();

        $('#btnSubmit').on('click', function (e) {
            e.preventDefault(); // Prevent form from submitting normally

            var orderNumber = $('#orderNumber').val();
            var supplier = $('#orderSupplier').val();
            var orderDate = $('#orderDate').val() === "" ? null : $('#orderDate').val();
            var handoverDate = $('#handoverDate').val() === "" ? null : $('#handoverDate').val();

            // Prepare an array to store parts data
            var parts = [];

            // Loop through each row of the table to collect part data
            $('#sectionlist tbody tr').each(function () {
                var partId = $(this).find('.partSelect option:selected').val(); // Get PartId
                var partName = $(this).find('.partSelect option:selected').text(); // Get PartName
                var quantity = $(this).find('input[name^="section-width"]').val(); // Get Quantity

                // Only push if both PartId and quantity are valid
                if (partId && quantity) {
                    parts.push({
                        PartId: parseInt(partId),
                        PartName: partName.trim(),
                        Quantity: parseInt(quantity)
                    });
                }
            });

            // Debugging output to check data
            console.log(parts); // Check if parts array is filled correctly

            // Create the request model
            var requestData = {
                OrderNumber: orderNumber,
                Supplier: supplier,
                OrderDate: orderDate,
                HandoverDate: handoverDate,
                Parts: parts
            };

            // Send the AJAX request to the controller
            $.ajax({
                url: '/dashboard/Order?handler=RegisterNewOrder', // Assuming this is your actual handler URL
                type: 'POST',
                data: JSON.stringify(requestData), // Send the request data as JSON
                contentType: 'application/json; charset=utf-8', // Specify content type as JSON
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: function (response) {
                    alert('Order submitted successfully!'); // Success callback
                },
                error: function (xhr, status, error) {
                    console.log(xhr.responseText); // Log error message for debugging
                    alert(xhr.responseText); // Show error alert
                }
            });
        });

        $('#searchOrderBtn').on('click', function (event) {
            event.preventDefault();

            // Collect search inputs
            let orderNumber = $('#searchOrderNumber').val();
            let supplier = $('#searchSupplier').val();
            let fromDate = $('#fromDate').val();
            let toDate = $('#toDate').val();

            // Prepare the search request payload
            let searchRequest = {
                OrderNumber: orderNumber,
                Supplier: supplier,
                FromDate: fromDate === "" ? null : fromDate,
                ToDate: toDate === "" ? null : toDate
            };

            // Send the search request to the server
            $.ajax({
                url: '/dashboard/Order?handler=SearchOrder', // Backend route
                type: 'POST',
                contentType: 'application/json',
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: JSON.stringify(searchRequest),
                success: function (response) {
                    // Handle the success response, e.g., populate order dropdown
                    if (response.success) {    
                        populateOrdersTable(response.result);
                    } else {
                        alert("No results found.");
                    }
                },
                error: function () {
                    alert('Error while searching for orders.');
                }
            });
        });

        // Function to populate the orders table
        function populateOrdersTable(orders) {
            let ordersTableBody = $('#orders-table tbody');
            ordersTableBody.empty(); // Clear previous data

            orders.forEach(order => {
                let row = `<tr>
                <td>${order.orderNumber}</td>
                <td>${order.supplier}</td>
                <td>${formatDate(order.orderDate)}</td>
                <td>${formatDate(order.handOverDate)}</td>
                <td><button class="btn btn-info show-parts-btn" data-order-number="${order.orderNumber}">Show Details</button></td>
            </tr>`;
                ordersTableBody.append(row);
            });

            // Bind event handler for "Show Details" button
            $('.show-parts-btn').on('click', function () {
                let orderNumber = $(this).data('order-number'); // Retrieve the order number
                showParts(orderNumber, orders);
            });
        }

        // Function to show parts for a specific order
        function showParts(orderNumber, orders) {
            // Find the selected order using the unique orderNumber
            let selectedOrder = orders.find(order => order.orderNumber === orderNumber);
            if (selectedOrder) {
                let partsTableBody = $('#parts-table tbody');
                partsTableBody.empty(); // Clear previous parts data

                selectedOrder.parts.forEach(part => {
                    let partRow = `<tr>
                    <td>${part.partName}</td>
                    <td>${part.quantity}</td>
                </tr>`;
                    partsTableBody.append(partRow);
                });

                // Show the parts table
                $('#parts-table').show();
            }
        }

        // Utility function to format dates (adjust as needed)
        function formatDate(dateString) {
            if (dateString) {
                let date = new Date(dateString);
                return date.toLocaleDateString(); // Adjust format as needed
            }
            return 'N/A';
        }


    });
</script>








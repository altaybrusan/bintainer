@page "/dashboard/part"
@using Bintainer.Model.Entity
@model PartModel
@{
}

<link rel="stylesheet" href="~/css/hierarchy-select.min.css">
<link rel="stylesheet" href="~/css/autocomplete.css">
<link rel="stylesheet" href="~/css/part-page-customization.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5/dist/js/bootstrap.bundle.min.js" type="module"></script> 
<style>
    ::placeholder {
        font-size: 12px;        
        font-style: italic;
    }

    .input-sharp {
        height: 30px; /* Reduced height */
        border-radius: 0; /* Sharp corners */
        border: 1px solid #ced4da; /* Custom border color */
        background-color: #ffffff; /* Background color */
        color: #002060; /* Text color */
    }

    .load-button-sharp {
        height: 30px; /* Reduced height */
        border-radius: 0; /* Sharp corners */        
    }

    .input-sharp:focus {
        border-color: #0062cc; /* Focus border color */
        box-shadow: 0 0 0 0.2rem rgba(0, 98, 204, 0.25); /* Focus glow effect */
    }


    .button-row {
        display: flex;
        align-items: center; /* Vertically center content */
        height: 30px; /* Set height to 30px */
    }    
    /* Style for the button inside .button-row */
    .button-row .btn {
            border-radius: 0; /* Sharp corners for button */
            margin-right: 10px; /* Add margin between button and select */
            font-size: 14px; /* Reduce font size */
    }
    /* Style for the select inside .button-row */
    .button-row select {
            height: 100%; /* Fill the height of the .button-row */
            border-radius: 0; /* Sharp corners for select */
            border: none; /* Remove default border */
            padding: 5px; /* Adjust padding */
            font-size: 14px; /* Reduce font size */
            width: max-content; /* Fit width to content */
    }

     form .error {
        color: #ff0000;
    }
</style>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active" aria-current="page" id="create-tab" data-bs-toggle="tab" data-bs-target="#create-part" href="#">Create</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="update-tab" data-bs-toggle="tab" data-bs-target="#update-part" href="#">Update</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="arrange-tab" data-bs-toggle="tab" data-bs-target="#arrange-part" href="#">Arrange</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="usage-tab" data-bs-toggle="tab" data-bs-target="#usage-part" href="#">Usage</a>
    </li>
</ul>

<div class="tab-content">
    <div id="create-part" class="tab-pane fade show active" role="tabpanel" aria-labelledby="create-tab">
        <div class="container">
            <div class="row">
                <div class="col-md-8" style="margin-left: 10px;">
                    <form id="myForm" class="well form-horizontal" method="post">
                        <fieldset>
                            <legend><h2>Part</h2></legend>
                            <hr />
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label">Part Name</label>
                                        <input id="partName" name="partName" placeholder="e.g., 2N2222A" class="form-control  input-sharp" required="required" type="text">
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label">Description</label>
                                        <input id="description" name="description" placeholder="e.g., TRANSISTOR DIS.800mA 50V NPN TO-18" class="form-control  input-sharp" required="required" type="text">
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label">Supplier</label>
                                        <input id="supplier" name="supplier" placeholder="e.g., Digikey" class="form-control  input-sharp" type="text">
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="control-label">Package/Footprint</label>
                                        <input type="text" class="form-control  input-sharp autocomplete" id="packageInput" placeholder="e.g., SOIC" />
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label">Category</label>
                                        <select id="categorySelect" class="form-select form-select-sm"
                                                required="required"
                                                asp-items="@(new SelectList(Model.Category,nameof(PartCategory.Id),nameof(PartCategory.Name)))">
                                            <option value="">Select Category</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label class="control-label">Group</label>
                                        <input type="text" class="form-control  input-sharp autocomplete" id="groupInput" placeholder="e.g., Usb" />
                                    </div>
                                </div>
                            </div>
                        </fieldset>
                        <div class="mb-4"></div>
                        <fieldset>
                            <legend><h2>Attributes</h2></legend>
                            <hr />
                            <div class="button-row align-items-start">
                                <div class="col-4">
                                    <select id="templateList" class="form-select form-select-lg mb-3 w-100"
                                            aria-label=".form-select-lg example"
                                            asp-items="@(new SelectList(Model.AttributeTemplatesTable,"Key","Value"))"
                                            target-table="attributeTable">
                                        <option selected value="">Templates</option>
                                    </select>
                                </div>
                            </div>
                            <div style="margin-bottom: 20px;"></div>
                            <table class="table" id="attributeTable">
                                <thead>
                                    <tr>
                                        <th>Product Attribute</th>
                                        <th>Attribute Value</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody id="productSpecTable"></tbody>
                            </table>
                        </fieldset>
                        <div class="mb-4"></div>
                        <fieldset>
                            <legend><h2>Suppliers</h2></legend>
                            <hr />
                            <table class="table" id="supplierTable">
                                <thead>
                                    <tr>
                                        <th>Supplier</th>
                                        <th>Part Number</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody id="supplierPartNumberTable">
                                    <tr>
                                        <td class="dtable-col1">
                                            <span>
                                                Digikey
                                            </span>
                                        </td>
                                        <td class="dtable-col2">
                                            <input type="text" class="form-control input-sharp" id="digikeyPartNumber" placeholder="Digikey part number">
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-success button-row" id="fetchDigikey" target-table="attributeTable">Fetch </button>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td class="dtable-col1">
                                            <span>
                                                Mouser
                                            </span>
                                        </td>
                                        <td class="dtable-col2">
                                            <input type="text" class="form-control input-sharp" placeholder="Mouser part number">
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-success button-row">Fetch </button>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </fieldset>
                        <div class="button-row align-items-end justify-content-end mt-5">
                            @* <button type="button" class="btn btn-danger">Cancel</button> *@
                            <button type="submit" class="btn btn-success" id="createPartBtn">Create</button>
                        </div>
                    </form>
                </div>
                <div class="col-md-2">
                    <div class="card card-custom">
                        <button type="button" class="btn btn-secondary load-button-sharp">Part</button>
                        <img src="~/image/microchip.png" id="partImage" class="img-fluid" alt="part image" />
                    </div>
                    <div class="card card-custom">
                        <button type="button" class="btn btn-secondary load-button-sharp">Footprint</button>
                        <img src="~/image/pinout.png" class="img-fluid" alt="footpring" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="update-part" class="tab-pane fade" role="tabpanel" aria-labelledby="update-tab"> 
        <div class="card mt-5">
            <div class="card-header">
                <i class="fa fa-search"></i>&nbsp; Search part
            </div>
            <div class="card-body">
                <form class="row" method="post" asp-page-handler="SearchForPart">
                    <div class="col-md-9">
                        <div class="row align-items-center">
                            <div class="col-md-2">
                                <div class="row">
                                    <label for="partName" class="form-label">Part name</label>
                                </div>      
                            </div>
                            <div class="col-md-4">
                                <div class="autocomplete">
                                    <input type="text" class="form-control input-sharp" id="searchPartName" placeholder="Part Name" data-autocomplete-options="searchPartNameData">
                                    <div id="searchPartNameData" style="display:none;">
                                        @Html.Raw(Json.Serialize(Model.Part.Select(p => p.Name.Trim())))
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="button-row btn btn-primary" id="searchPartBtn">Search</button>
                            </div>
                        </div>
                    </div>
                </form>
                <form class="well form-horizontal" style="margin-top: 20px;">
                    <legend><h2>Attributes</h2></legend>
                    <hr />
                    <fieldset>
                        <div style="margin-bottom: 20px;"></div>
                        <table class="table" id="searchedProductSpecTable">
                            <thead>
                                <tr>
                                    <th>Product Attribute</th>
                                    <th>Attribute Value</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody id="productAttributeTable"></tbody>
                        </table>
                    </fieldset>
                </form>
                <div class="button-row align-items-start">
                    <button class="btn btn-primary me-2 ms-2" id="addAttribute" target-table="searchedProductSpecTable" style="height:30px">Add Row</button>
                    <button class="btn btn-primary me-2 ms-2" id="updateAttribute" target-table="searchedProductSpecTable" style="height:30px">Update</button>
                </div>
            </div>
        </div>
    </div>
    <div id="arrange-part" class="tab-pane fade" role="tabpanel" aria-labelledby="arrange-part">
        <div class="card mt-5">
            <div class="card-header">
                <i class="fa fa-cog fa-spin"></i>&nbsp; Arrange parts
            </div>
            <div class="card-body">
                <form class="row" method="post" asp-page-handler="ArrangePart">
                    <div class="col-md-9">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="row align-items-center">
                                        <label class="control-label">Part</label>
                                        <div class="autocomplete">
                                            <input type="text" class="form-control input-sharp" id="arrangePartList" placeholder="Part Name" data-autocomplete-options="arrangePartListData" required="required">
                                            <div id="arrangePartListData" style="display:none;">
                                                @Html.Raw(Json.Serialize(Model.Part.Select(p => p.Name.Trim())))
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row align-items-center">
                                        <label class="control-label">Section</label>
                                        <select id="sectionSelect" class="form-select form-select-sm" required="required">
                                            <option value="">Select Section</option>
                                            @if (Model.Inventory?.InventorySections is not null)
                                            {
                                                @foreach (var invSection in Model.Inventory?.InventorySections)
                                                {
                                                    <option value="@invSection.Id" data-width="@invSection.Width" data-height="@invSection.Height" data-subspace="@invSection.SubspaceCount">
                                                        @invSection.SectionName
                                                    </option>
                                                }
                                            }
                                        </select>
                                        <label class="control-label">Coordinate (X,Y)</label>
                                    </div>
                                    <div class="row align-items-center">
                                        <div class="col-md-6">
                                            <input type="number" name="x-position" class="form-control input-sharp" min="1" value="1"  />
                                        </div>
                                        <div class="col-md-6">
                                            <input type="number" name="y-position" class="form-control input-sharp" min="1" value="1" />
                                        </div>
                                    </div>                                    
                                    <div class="row align-items-center">
                                        <div class="col-md-6 align-items-center">
                                            <label class="control-label">Subspace (Quantity)</label>
                                            <div class="col-md-12">
                                                <div id="subspaceCheckboxes"></div>
                                            </div>
                                        </div>
                                        <div class="col-md-6 align-items-center">
                                            <label class="control-label">Label</label>
                                            <div class="col-md-12">
                                                <input type="text" name="subspaceLabel" id="subspaceLabel" class="form-control input-sharp" placeholder="cabinate label" />
                                            </div>
                                        </div>                                        
                                    </div>
                                    <div class="row align-items-center">
                                        <div class="col-md-6">
                                            @* <input type="checkbox" id="fillAll" />
                                             <label for="fillAll">Fill All</label>
                                            <!-- New input for Fill All quantity -->
                                            <input type="number" id="fillAllQuantity"  class="form-control input-sharp" value="0" min="0" disabled />*@
                                        </div>
                                    </div>

                                    <label class="control-label">Group</label>
                                    <div class="row align-items-center">
                                        <div class="col-md-6">
                                            <input type="text" id="partGroup" class="form-control input-sharp autocomplete" placeholder="e.g., USB" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <button type="button" class="button-row btn btn-primary" id="arrangePartBtn" style="margin-top: 20px;">Submit</button>
                                    </div>
                                </div>
                            </div>                            

                        </div>
                    </div>
                </form>
                <form class="well form-horizontal" style="margin-top: 20px;">
                    <legend><h2>List</h2></legend>
                    <hr />
                    <fieldset>
                        <div style="margin-bottom: 20px;"></div>
                        <div style="max-height: 300px; overflow-y: auto;">
                            <!-- Add scrollable container -->
                            <table class="table" id="searchedProductSpecTable">
                                <thead>
                                    <tr>
                                        <th>Part Name</th>
                                        <th>Section</th>
                                        <th>Coordinate (X)</th>
                                        <th>Coordinate (Y)</th>
                                        <th>Subspace</th>
                                        <th>Label</th>
                                        <th>Group</th>
                                        <th>Action</th>
                                        <th></th>
                                    </tr>
                                </thead>
                                <tbody id="partBinAssignmentTableBody"></tbody>
                            </table>
                        </div>
                    </fieldset>
                </form>
            </div>
        </div>
    </div>
    <div id="usage-part" class="tab-pane fade" role="tabpanel" aria-labelledby="usage-part">
        <div class="card mt-5">
            <div class="card-header">
                <i class="fa fa-ravelry" aria-hidden="true"></i>&nbsp; Part usage
            </div>
            <div class="card-body">
                <form class="row" method="post" asp-page-handler="UsePart">
                    <div class="col-md-9">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="control-label">Part</label>
                                    <div class="autocomplete">
                                        <input type="text" class="form-control input-sharp" id="usePartName" placeholder="Part Name" data-autocomplete-options="partNamesData">
                                        <div id="partNamesData" style="display:none;">
                                            @Html.Raw(Json.Serialize(Model.Part.Select(p => p.Name.Trim())))
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-1">
                                <button type="button" class="button-row btn btn-primary" id="usePartBtn">Search</button>
                            </div>
                        </div>
                    </div>
                </form>
                <hr />
                <form class="well form-horizontal" style="margin-top: 20px;">
                    <legend><h2>Location</h2></legend>
                    <hr />
                    <fieldset>
                        <div style="margin-bottom: 20px;"></div>
                        <table class="table" id="usePartTable">
                            <thead>
                                <tr>
                                    <th>Part</th>
                                    <th>Section</th>
                                    <th>Coordinate X</th>
                                    <th>Coordinate Y</th>
                                    <th>Subspace</th>
                                    <th>Label</th>
                                    <th>Quantity</th>
                                    <th>Use</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </fieldset>
                </form>
            </div>
        </div>
    </div>
</div>

<script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>

<script type="text/template" id="tr_template">
    <td class="dtable-col1"></td>
    <td class="dtable-col2"></td>
    <td><a data-mode='edit' class="action" href="javascript:void(0)">edit</a></td>
    <td><a class="delete" href="javascript:void(0)">delete</a></td>
</script> 


<script type="module">
    import Autocomplete from "https://cdn.jsdelivr.net/gh/lekoala/bootstrap5-autocomplete@master/autocomplete.js";
    const opts = {
        onSelectItem: console.log,
    };    
    var packageList = [];
    var groupList = [];

    @for (int i = 0; i < @Model.Packages.Count; i++)
    {
        @if (Model.Packages[i] != null)
        {
            @:packageList.push({
            @:title: "@Model.Packages[i].Name?.Trim()",  
            @:id: "@(Model.Packages[i].Id)",
            @:data: {
            @:key: @i,
            @:    }
            @:});
        }
    }
    @for (int i = 0; i < @Model.Group.Count; i++)
    {
        @if (Model.Group[i] != null)
        {
            @:groupList.push({
            @:title: "@Model.Group[i].Name?.Trim()",
            @:id: "@(Model.Group[i].Id)",
            @:data: {
            @:key: @i,
            @:    }
            @:});
        }
    }

    Autocomplete.init("#packageInput", {
            items: packageList,
            valueField: "id",
            labelField: "title",
            highlightTyped: true,
            onSelectItem: console.log,
        });   
    Autocomplete.init("#groupInput", {
        items: groupList,
        valueField: "id",
        labelField: "title",
        highlightTyped: true,
        onSelectItem: console.log,
    });

</script>

<script type="text/javascript">
    function isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }

    $(document).ready(function () {

        // Disable the buttons by default
        $('#addAttribute').prop('disabled', true);
        $('#updateAttribute').prop('disabled', true);

        // Call the function initially
        $('#templateList').on('change', function (event) {
            var selectedId = document.getElementById("templateList").value;
            var selectedText = $(this).find('option:selected').text();
            $('#attributeName').val(selectedText.trim());
            var targetTableId = $(this).attr('target-table'); // Get the ID from the target-table attribute
            var table = $('#' + targetTableId); // Select the table using the ID
            table.find('tbody').empty();
            $.ajax({
                type: 'POST',
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                url: '/dashboard/template?handler=LoadAttributeTable&tableId=' + selectedId,
                contentType: 'application/json',
                success: function (response) {
                    console.log('Data saved successfully:', response);
                    if (table.length) { // Check if the table exists
                        $.each(response, function (index, item) {
                            appendRowToTable(table, item.name, item.value);
                        });                       
                    } else {
                        console.error('Table with ID "' + targetTableId + '" not found.');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error saving data:', status, error);
                    alert('Failed to save data.');
                }
            });

        });        
        $('#addSupplier').on('click', function (event) {
            event.preventDefault();
            var targetTableId = $(this).attr('target-table'); // Get the ID from the target-table attribute
            var table = $('#' + targetTableId); // Select the table using the ID
            if (table.length) { // Check if the table exists
                appendRowToTable(table); // Call the function with the table jQuery object
            } else {
                console.error('Table with ID "' + targetTableId + '" not found.');
            }
        });
        $('.search-dropdown').each(function () {
            var $dropdown = $(this);
            var $input = $dropdown.find('.search-input');
            var $menu = $dropdown.find('.dropdown-menu');

            $input.on('input', function () {
                var inputValue = $input.val();
                var dataAttribute = $input.attr('data-source');
                var results = JSON.parse(dataAttribute);
                var matchingWords = inputValue ? results.filter(word => word.toLowerCase().includes(inputValue.toLowerCase())) : results;

                $menu.find('li').remove(); // Remove existing list items
                populateList(matchingWords, $menu, $dropdown.find('.dropdown-toggle'));
            });
        });
        $('#fetchDigikey').on('click', function (event) {
            event.preventDefault();
            var targetTableId = $(this).attr('target-table');
            var digiKeyPartNumber = $('#digikeyPartNumber').val();
            var table = $('#' + targetTableId);
            table.find('tbody').empty();
            var url = '@Url.Page("Part", "DigikeyParameters")';
            $.ajax({
                url: url,
                type: 'Get',
                data: {
                    partNumber: digiKeyPartNumber
                },
                success: function (response) {
                    console.log('Data saved successfully:', response);
                    if (table.length) { // Check if the table exists
                        $.each(response, function (index, item) {
                            if (item.category === "Parameter") {
                                appendRowToTable(table, item.name, item.value);

                                if (item.name === "Package / Case") {
                                    $('#packageInput').val(item.value);

                                }
                            }
                            if (item.category === "PhotoUrl" && item.value) {                               
                                if (isValidUrl(item.value)) {
                                    $('#partImage').attr('src', item.value);
                                } else {
                                    console.error('Invalid URL:', item.value);
                                }
                            }
                            if (item.category === "DetailedDescription" && item.value){
                                $('#description').val(item.value);
                                $('#partName').val(digiKeyPartNumber);

                            }

                        });
                        $('#supplier').val("DigiKey");
                        // Call the function with the table jQuery object
                    } else {
                        console.error('Table with ID "' + targetTableId + '" not found.');
                    }
                },
                error: function (xhr, status, error) {
                    // Handle any errors here
                    alert('There is an error during the fetch. Please check if the Part Number is correct.');
                    console.error(error);
                }
            });
        });
        $('#searchPartBtn').on('click', function (event) {
            event.preventDefault();
            searchPart(); // Trigger the search
        });
        // Disable buttons if the input is cleared
        // Event handler for pressing "Enter" in the input field
        $('#searchPartName').on('keydown', function (event) {
            if (event.key === 'Enter') {
                event.preventDefault();
                searchPart(); // Trigger the search on Enter key press
            }
        });
        // Disable buttons and clear table if input is cleared
        $('#searchPartName').on('keyup', function () {
            var partName = $(this).val().trim();
            if (partName.length === 0) {
                $('#addAttribute').prop('disabled', true);
                $('#updateAttribute').prop('disabled', true);
                var table = $('#searchedProductSpecTable');
                table.find('tbody').empty(); // Clear table if input is empty
            }
        });
        $('#addAttribute').on('click', function (event) {
            event.preventDefault(); // Prevent default form submission behavior
            //var targetTableId = $(this).attr('searchedProductSpecTable'); // Get the ID from the target-table attribute
            var table = $('#searchedProductSpecTable'); // Select the table using the ID
            if (table.length) { // Check if the table exists
                appendRowToTable(table); // Call the function with the table jQuery object
            } else {
                console.error('Table with ID searchedProductSpecTable not found.');
            }
        });
        $('#updateAttribute').on('click', function (event) {
            event.preventDefault();
            var partName = $('#searchPartName').val();
            var productAttributes = {};
            $('#productAttributeTable tr').each(function () {
                var row = $(this);
                var attribute = row.find('td').eq(0).find('input').val().trim();
                var value = row.find('td').eq(1).find('input').val().trim();
                productAttributes[attribute] = value;
            });

            $.ajax({
                type: 'POST',
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                url: '/dashboard/part?handler=UpdatePartAttribute',
                contentType: 'application/json',
                data: JSON.stringify({ attributes: productAttributes, partName: partName }),
                success: function (response) {
                    console.log('Data saved successfully:', response);
                    alert('Data saved successfully!');
                },
                error: function (xhr, status, error) {
                    console.error('Error saving data:', status, error);
                    alert('Failed to save data.');
                }
            });
           
        });
        $('#createPartBtn').on('click', function (event) {   
            event.preventDefault();
            var validator = $("#myForm").validate();
            var isValid = validator.form();
            if (!isValid) {
                return;                    
            }
            var token = $('input[name="__RequestVerificationToken"]').val();
            // Gather data from the form fields
            var selectedIndex = $('#templateList').val();
            //var orderDate = $('#orderDate').val();
            var groupValue = $('#groupInput').val();
            var packageValue = $('#packageInput').val();

            var partData = {
                PartName: $('#partName').val(),
                Description: $('#description').val(),
                Supplier: $('#supplier').val(),                                         
                //OrderNumber: $('#order').val(),
                //OrderQuantity: $('#orderQuantity').val(),
                CategoryId: $('#categorySelect').val(),
                AttributeTemplateId: selectedIndex,
                Attributes: {},
            };
            if (groupValue) {
                partData.Group = groupValue;
            }
            // if (orderDate) {
            //     partData.OrderDate = orderDate;
            // }
            if (packageValue) {
                partData.Package = packageValue;
            }

            //Gather attributes from the attribute table
            $('#attributeTable tbody tr').each(function () {
                var attributeName = $(this).find('.dtable-col1 input').val().trim();
                var attributeValue = $(this).find('.dtable-col2 input').val().trim();

                if (attributeName && attributeValue) {
                    partData.Attributes[attributeName] = attributeValue;
                }
            });

            // Send data to the server
            $.ajax({
                url: '/dashboard/Part?handler=CreatePart',
                type: 'Post',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(partData),
                headers: {
                    'XSRF-TOKEN': token // Include the CSRF token in the request header
                },
                success: function (response) {
                    // Handle successful response
                    console.log(response);
                    event.preventDefault(); // enable validation
                    alert(response.message); // Show success message
                    // Optionally, you can redirect or show a success message
                },
                error: function (xhr, status, error) {
                    // Handle error response
                    console.error('Error:', error);
                    // Optionally, you can show an error message
                }
            });
            
        });

        // Listen to the 'input' event on x-position, y-position, and subspace fields
        $('input[name="x-position"], input[name="y-position"], input[name="subspace"]').on('input', function () {
            // Get the current value of the input
            var value = parseInt($(this).val());

            // Get the max value from the respective max attribute
            var maxVal = parseInt($(this).attr('max'));

            // Check if the value exceeds the max, if yes, set it to the max
            if (!isNaN(maxVal) && value > maxVal) {
                $(this).val(maxVal);
            }

            // Prevent negative or zero values
            if (value < 1 || isNaN(value)) {
                $(this).val(1);
            }
        });
        $('#sectionSelect').on('change', function () {
            // Get the selected option
            var selectedOption = $(this).find('option:selected');

            // Get width, height, and subspace from data attributes
            var width = selectedOption.data('width');
            var height = selectedOption.data('height');
            var subspace = selectedOption.data('subspace');

            // Set the maximum values for x and y input fields
            if (width && height) {
                $('input[name="x-position"]').attr('max', width);
                $('input[name="y-position"]').attr('max', height);
            } else {
                // Clear the max values if no valid section is selected
                $('input[name="x-position"]').removeAttr('max').val(1);
                $('input[name="y-position"]').removeAttr('max').val(1);
            }

            // Clear the previous checkboxes
            $('#subspaceCheckboxes').empty();
            $('#fillAll').prop('checked', false); // Uncheck the 'Fill All' checkbox

            // If valid subspace is selected, create checkboxes with numeric inputs
            if (subspace && subspace > 0) {
                for (var i = 1; i <= subspace; i++) {
                    // Create a flex container for each checkbox and numeric input
                    var container = $('<div />', {
                        class: 'subspace-container',
                        style: 'display: flex; align-items: center; margin-bottom: 5px;'
                    });

                    // Create checkbox
                    var checkbox = $('<input />', {
                        type: 'checkbox',
                        class: 'subspace-checkbox',
                        id: 'subspace-' + i,
                        name: 'subspace[' + i + ']',
                        value: i
                    });

                    // Create label
                    var label = $('<label />', {
                        'for': 'subspace-quantity-' + i,
                        text: i,
                        style: 'margin-right: 5px; margin-left: 5px;'
                    });

                    // Create numeric input for the quantity
                    var quantityInput = $('<input />', {
                        type: 'number',
                        class: 'subspace-quantity',
                        id: 'subspace-quantity-' + i,
                        name: 'subspace-quantity[' + i + ']',
                        value: 0,
                        min: 0,
                        style: 'width: 100px; margin-left: 10px;' // Adjust width and margin for alignment
                    });

                    // Append checkbox, label, and quantity input to the container
                    container.append(checkbox).append(label).append(quantityInput);

                    // Append the container to the subspaceCheckboxes div
                    $('#subspaceCheckboxes').append(container);
                }

                // Bind event to individual checkboxes
                $('.subspace-checkbox').on('change', function () {
                    // Check if all checkboxes are selected
                    var allChecked = $('.subspace-checkbox').length === $('.subspace-checkbox:checked').length;
                    $('#fillAll').prop('checked', allChecked); // Check/uncheck "Fill All" based on individual selections

                    // Trigger the same logic as if the 'Fill All' checkbox was clicked
                    if (allChecked) {
                        $('#fillAll').trigger('change'); // Disable individual fields if all checkboxes are checked
                    }
                });

                // Add the "Fill All" checkbox and quantity input at the end
                var fillAllContainer = $('<div />', {
                    id: 'fillAllContainer',
                    style: 'display: flex; align-items: center; margin-bottom: 5px;'
                });

                // Create fill all checkbox
                var fillAllCheckbox = $('<input />', {
                    type: 'checkbox',
                    id: 'fillAll',
                    name: 'fillAll'
                });

                // Create label for fill all checkbox
                var fillAllLabel = $('<label />', {
                    'for': 'fillAll',
                    text: 'Fill All',
                    style: 'margin-right: 5px; margin-left: 5px;'
                });

                // Create numeric input for the "Fill All" option
                var fillAllInput = $('<input />', {
                    type: 'number',
                    class: 'fill-all-quantity',
                    id: 'fillAllQuantity',
                    name: 'fillAllQuantity',
                    value: 0,
                    min: 0,
                    disabled: true,
                    style: 'width: 100px; margin-left: 10px;'
                });

                // Append everything to the fillAllContainer
                fillAllContainer.append(fillAllCheckbox).append(fillAllLabel).append(fillAllInput);

                // Append the container to the UI
                $('#subspaceCheckboxes').append(fillAllContainer);

                // Bind event to 'Fill All' checkbox
                $('#fillAll').on('change', function () {
                    var isChecked = $(this).prop('checked');

                    // Enable/disable 'Fill All' quantity input based on 'Fill All' state
                    $('#fillAllQuantity').prop('disabled', !isChecked);

                    // Check/uncheck all individual subspace checkboxes
                    $('.subspace-checkbox').prop('checked', isChecked);

                    // Disable all individual subspace quantity inputs when 'Fill All' is checked
                    $('.subspace-quantity').prop('disabled', isChecked);

                    if (isChecked) {
                        // Clear the individual subspace quantities
                        $('.subspace-quantity').val('');
                    }
                });
            }
        });

        $('#fillAll').on('change', function () {
            var isChecked = $(this).is(':checked');

            //Enable or disable the Fill All quantity field
            $('#fillAllQuantity').prop('disabled', !isChecked);

            //Disable/enable individual subspace checkboxes and quantities based on 'Fill All' checkbox
            $('.subspace-checkbox').prop('disabled', isChecked);
            $('.subspace-quantity').prop('disabled', isChecked);

            //Clear the values for individual subspace quantities if Fill All is selected
            if (isChecked) {
                $('.subspace-quantity').val('');  //Clear individual subspace quantities when Fill All is selected
            } else {
                //If Fill All is unchecked, you can re-enable and optionally reset the individual subspace quantities as needed
                $('.subspace-quantity').val(0);  //Reset individual subspace quantities
            }
        });
        $('#arrangePartBtn').on('click', function (event) {
            event.preventDefault();

            var partName = $('#arrangePartList').val();
            var sectionId = parseInt($('#sectionSelect').val()); // Convert to int
            var xPosition = parseInt($('input[name="x-position"]').val()); // Convert to int
            var yPosition = parseInt($('input[name="y-position"]').val()); // Convert to int

            var subspaceQuantities = {};

            // If Fill All is checked, collect the Fill All quantity
            var isFilled = $('#fillAll').prop('checked');
            var fillAllQuantity = isFilled ? parseInt($('#fillAllQuantity').val()) : null; // Convert to int if filled

            if (!isFilled) {
                // Collect quantities for individual subspaces if Fill All is not checked
                $('.subspace-checkbox:checked').each(function () {
                    var subspaceId = parseInt($(this).val()); // Convert to int
                    var quantity = parseInt($(this).siblings('.subspace-quantity').val()); // Convert to int
                    subspaceQuantities[subspaceId] = quantity;
                });
            }

            var data = {
                PartName: partName,
                SectionId: sectionId,
                CoordinateX: xPosition,
                CoordinateY: yPosition,
                SubspaceQuantities: subspaceQuantities,
                Label: $('#subspaceLabel').val(),
                Group: $('#partGroup').val(),
                IsFilled: isFilled,
                FillAllQuantity: fillAllQuantity
            };

            if (!partName || !sectionId || !xPosition || !yPosition || (!isFilled && Object.keys(subspaceQuantities).length === 0)) {
                alert("Please fill all the required fields.");
                return;
            }

            $.ajax({
                url: '/dashboard/Part?handler=ArrangePart',
                type: 'POST',
                contentType: 'application/json',
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                data: JSON.stringify(data),
                success: function (response) {
                    var newRow = '<tr>' +
                        '<td>' + $.trim($('#arrangePartList').val()) + '</td>' +
                        '<td>' + $.trim($('#sectionSelect option:selected').text()) + '</td>' +
                        '<td>' + data.CoordinateX + '</td>' +
                        '<td>' + data.CoordinateY + '</td>' +
                        '<td>' + (isFilled ? 'Filled All (' + fillAllQuantity + ')' : Object.keys(subspaceQuantities).map(k => 'Subspace ' + k + ': ' + subspaceQuantities[k]).join(', ')) + '</td>' +
                        '<td>' + data.Label + '</td>' +
                        '<td>' + data.Group + '</td>' +
                        '<td><button type="button" class="btn btn-danger btn-sm remove-row-btn">Remove</button></td>' +
                        '</tr>';
                    $('#partBinAssignmentTableBody').append(newRow);

                    // Reset form fields
                    $('#arrangePartList').val('');
                    $('#sectionSelect').val('');
                    $('input[name="x-position"]').val(1);
                    $('input[name="y-position"]').val(1);
                    $('#partGroup').val('');
                    $('#subspaceLabel').val('');
                    $('.subspace-checkbox').prop('checked', false).prop('disabled', false);
                    $('.subspace-quantity').val(0).prop('disabled', true);
                    $('#fillAll').prop('checked', false);
                    $('#fillAllQuantity').val(0).prop('disabled', true);

                },
                error: function (xhr, status, error) {
                    alert('Error: Unable to arrange part. Please try again.');
                    console.error(error);
                }
            });
        });
        
        $('#usePartBtn').on('click', function (event) {
            event.preventDefault();
            var partName = $('#usePartName').val().trim();
            var token = $('input[name="__RequestVerificationToken"]').val(); // Extract CSRF token
            var table = $('#usePartTable'); // Select the table
            table.find('tbody').empty(); // Clear previous table rows

            if (partName.length === 0) {
                alert('Please enter a valid part name.');
                return;
            }

            $.ajax({
                url: '/dashboard/Part?handler=UsePart&partName=' + partName,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN", token);
                },
                contentType: "application/json; charset=utf-8",
                type: 'POST',
                success: function (response) {
                    if (table.length) { // Check if the table exists
                        if (response.length > 0) {
                            $.each(response, function (index, item) {
                                var newRow = '<tr>' +
                                    '<td>' + item.partName + '</td>' +
                                    '<td>' + item.section + '</td>' +
                                    '<td>' + item.coordinateX + '</td>' +
                                    '<td>' + item.coordinateY + '</td>' +
                                    '<td>' + item.subspaceIndices + '</td>' + // Display subspaces as comma-separated indices
                                    '<td>' + item.label + '</td>' +
                                    '<td>' + item.quantity + '</td>' +
                                    // Add the numeric up-down for the Use column
                                    '<td><input type="number" class="use-input" min="0" max="' + item.quantity +
                                    '" data-subspace-indices="' + item.subspaceIndices +
                                    '" data-bin-id="' + item.binId + '" data-part-name="' + item.partName + '" data-quantity="' + item.quantity + '"></td>' +

                                    '</tr>';
                                table.find('tbody').append(newRow);
                            });

                            // Enable buttons if data is successfully fetched
                            $('#addAttribute').prop('disabled', false);
                            $('#updateAttribute').prop('disabled', false);

                            // Add event listener for numeric input
                            $('.use-input').on('keydown', function (e) {
                                if (e.key === "Enter") {
                                    var quantityUsed = parseInt($(this).val(), 10);
                                    var binId = parseInt($(this).data('bin-id'), 10);
                                    var partName = $(this).data('part-name');
                                    var quantity = parseInt($(this).data('quantity'), 10);
                                    var subspaceIndices = $(this).data('subspace-indices');

                                    // Perform AJAX request to send the quantity used to the backend
                                    $.ajax({
                                        url: '/dashboard/Part?handler=AdjustQuantity',
                                        type: 'POST',
                                        beforeSend: function (xhr) {
                                            xhr.setRequestHeader("XSRF-TOKEN", token);
                                        },
                                        contentType: 'application/json; charset=utf-8',
                                        data: JSON.stringify({ partName: partName, binId: binId, quantityUsed: quantityUsed, subspaceIndices: subspaceIndices, quantity: quantity }),
                                        success: function (response) {
                                            alert('Quantity updated successfully');
                                            // Optionally, update the row's quantity in the UI
                                            $(e.target).closest('tr').find('td:nth-child(7)').text(response.newQuantity);
                                        },
                                        error: function (xhr, status, error) {
                                            alert('Failed to update quantity');
                                            console.error('Error:', error);
                                        }
                                    });
                                }
                            });

                        } else {
                            alert('No attributes found for the given part number.');
                        }
                    } else {
                        console.error('Table not found.');
                    }
                },
                error: function (xhr, status, error) {
                    alert('The part number is not valid.');
                    console.error('Error:', error);
                }
            });
        });


        $('#searchPartBtn').on('click', function (event) {
            event.preventDefault();
            var number = $('#usePartName').val().trim();
            var token = $('input[name="__RequestVerificationToken"]').val(); // Extract CSRF token
            var table = $('#searchedProductSpecTable'); // Select the table
            table.find('tbody').empty(); // Clear previous table rows

            if (number.length === 0) {
                alert('Please enter a valid part number.');
                return;
            }

            $.ajax({
                url: '/dashboard/Part?handler=SearchForPart&partNumber=' + number,
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN", token);
                },
                contentType: "application/json; charset=utf-8",
                type: 'Post',
                success: function (response) {
                    if (table.length) { // Check if the table exists
                        if (response.length > 0) {
                            $.each(response, function (index, item) {
                                appendRowToTable(table, item.name, item.value);
                            });
                            // Enable buttons if data is successfully fetched
                            $('#addAttribute').prop('disabled', false);
                            $('#updateAttribute').prop('disabled', false);
                        } else {
                            alert('No attributes found for the given part number.');
                        }
                    } else {
                        console.error('Table not found.');
                    }
                },
                error: function (xhr, status, error) {
                    alert('The part number is not valid.');
                    console.error('Error:', error);
                }
            });
        });

    });
</script>


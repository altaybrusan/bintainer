@page "/dashboard/inventory"
@using System.Text.Json;
@model InventoryModel
@{
}
@Html.AntiForgeryToken()
<link rel="stylesheet" href="~/css/hierarchy-select.min.css">
<link rel="stylesheet" href="~/css/autocomplete.css">
<style>
    .button-row {
        display: flex;
        align-items: center; /* Vertically center content */
        height: 30px; /* Set height to 30px */
        border-radius: 0; /* Sharp corners for button */
        margin-right: 10px; /* Add margin between button and select */
        font-size: 14px; /* Reduce font size */
    }

    .button-row:active,
    .button-row:focus {
            outline: none; /* Remove outline when button is focused */
    }

</style>

<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link active" aria-current="page" id="create-tab" data-bs-toggle="tab" data-bs-target="#create-inventory" href="#">Create</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" id="summary-tab" data-bs-toggle="tab" data-bs-target="#summary-part" href="#">Summary</a>
    </li>
</ul>

<div class="tab-content">
    <div id="create-inventory" class="tab-pane fade show active" role="tabpanel" aria-labelledby="create-tab">
        <div class="container">
            <div class="row">
                <div class="col-md-8" style="margin-left: 10px;">
                    <form id="form1" runat="server">
                        <div class="container">
                            <h2>Inventory</h2>
                            <hr />
                            <div class="row align-items-center">
                                <div class="col-md-2">
                                    <label for="inventoryName" class="form-label">Inventory Name</label>
                                    <label class="form-label">Admin</label>
                                </div>
                                <div class="col-md-4">
                                    <input type="text" class="form-control input-sharp" id="inventoryName" value="@Model.InventoryName" placeholder="Inventory Name" required />
                                    <input type="text" class="form-control input-sharp" value="@User.Identity?.Name" disabled="disabled" />
                                </div>
                            </div>

                            <h2>Section List</h2>
                            <hr />
                            <div class="row">
                                <div class="col-12">
                                    <table class="table" id="sectionlist">
                                        <thead>
                                            <tr>
                                                <th style="width:300px">Section Name</th>
                                                <th style="width:150px;">Width</th>
                                                <th style="width:150px;">Height</th>
                                                <th style="width:150px;">Bin Subspace</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (Model.Sections == null || Model.Sections.Count == 0)
                                            {
                                                <tr id="0">
                                                    <td>
                                                        <input type="text" name="section-name" class="form-control input-sharp" value="" />
                                                    </td>
                                                    <td>
                                                        <input type="number" name="section-width" class="form-control input-sharp"
                                                               min="@Model.MinSectionWidth" max="@Model.MaxSectionWidth"
                                                               value="@Model.MinSectionWidth" />
                                                    </td>
                                                    <td>
                                                        <input type="number" name="section-height" class="form-control input-sharp"
                                                               min="@Model.MinSectionHeight" max="@Model.MaxSectionHeight"
                                                               value="@Model.MinSectionHeight" />
                                                    </td>
                                                    <td>
                                                        <input type="number" name="bin-section" class="form-control input-sharp"
                                                               min="@Model.MinSubspace" max="@Model.MaxSubspace"
                                                               value="@Model.MinSubspace" />
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-primary btn-xs classAdd">Add</button>
                                                    </td>
                                                </tr>
                                            }
                                            else
                                            {
                                                @for (int i = 0; i < Model.Sections.Count; i++)
                                                {
                                                    <tr id="@Model.Sections[i].Id">
                                                        <td>
                                                            <input type="text" name="section-name" class="form-control input-sharp" value="@Model.Sections[i].SectionName" />
                                                        </td>
                                                        <td>
                                                            <input type="number" name="section-width" class="form-control input-sharp"
                                                                   min="@Model.MinSectionWidth" max="@Model.MaxSectionWidth"
                                                                   value="@Model.Sections[i].Width" />
                                                        </td>
                                                        <td>
                                                            <input type="number" name="section-height" class="form-control input-sharp"
                                                                   min="@Model.MinSectionHeight" max="@Model.MaxSectionHeight"
                                                                   value="@Model.Sections[i].Height" />
                                                        </td>
                                                        <td>
                                                            <input type="number" name="bin-section" class="form-control input-sharp"
                                                                   min="@Model.MinSubspace" max="@Model.MaxSubspace"
                                                                   value="@Model.Sections[i].SubspaceCount" />
                                                        </td>
                                                        <td>
                                                            <div class="button-row">
                                                                <button type="button" class="btn btn-primary btn-xs classAdd">Add</button>
                                                                <button type="button" class="btn btn-danger btn-xs btnDelete">Remove</button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                    <div class="mt-5 text-end">
                                        <button type="button" id="submitBtn" class="btn btn-primary btn-md">Submit</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div id="summary-inventory" class="tab-pane fade show active" role="tabpanel" aria-labelledby="summary-tab">
        <form class="well form-horizontal" style="margin-top: 20px;">
            <legend><h2>Inventory</h2></legend>
            <hr />
            <fieldset>
                <div style="margin-bottom: 20px;">
                    <!-- Add Load Button -->
                    <button type="button" id="loadInventoryBtn" class="btn btn-primary">Load Inventory</button>
                </div>
                <div style="max-height: 300px; overflow-y: auto;">
                    <table class="table" id="inventorySummaryTable">
                        <thead>
                            <tr>
                                <th>Part number</th>
                                <th>Section</th>
                                <th>Coordinate (X)</th>
                                <th>Coordinate (Y)</th>
                            </tr>
                        </thead>
                        <tbody id="inventorySummaryTableBody"></tbody>
                    </table>
                </div>
            </fieldset>
        </form>
    </div>

</div>




<script type="text/javascript">
    $(document).ready(function () {
        var minSectionWidth = @Model.MinSectionWidth;
        var maxSectionWidth = @Model.MaxSectionWidth;
        var minSectionHeight = @Model.MinSectionHeight;
        var maxSectionHeight = @Model.MaxSectionHeight;
        var minSubspace = @Model.MinSubspace;
        var maxSubspace = @Model.MaxSubspace;

        function validateBounds(input, min, max) {
            var value = parseInt(input.val(), 10);
            if (isNaN(value)) return; // Ignore NaN values
            if (value < min) {
                input.val(min); // Truncate to minimum
            } else if (value > max) {
                input.val(max); // Truncate to maximum
            }
        }

        $(document).on("click", ".classAdd", function () {
            var rowCount = $('#sectionlist tbody tr').length + 1;
            var newRow = `<tr id="0" class="inventory-subsection-list">
                                <td><input type="text" name="section-name${rowCount}" class="form-control input-sharp" /></td>
                                <td><input type="number" name="section-width${rowCount}" class="form-control input-sharp" min="${minSectionWidth}" max="${maxSectionWidth}" value="${minSectionWidth}" /></td>
                                <td><input type="number" name="section-height${rowCount}" class="form-control input-sharp" min="${minSectionHeight}" max="${maxSectionHeight}" value="${minSectionHeight}" /></td>
                                <td><input type="number" name="bin-section${rowCount}" class="form-control input-sharp" min="${minSubspace}" max="${maxSubspace}" value="${minSubspace}" /></td>
                                <td>
                                    <div class="button-row">
                                        <button type="button" class="btn btn-primary btn-xs classAdd">Add</button>
                                        <button type="button" class="btn btn-danger btn-xs btnDelete">Remove</button>
                                    </div>
                                </td>
                            </tr>`;
            $('#sectionlist tbody').append(newRow);
        });

        $(document).on("click", ".btnDelete", function () {
            var row = $(this).closest("tr");
            var sectionName = row.find("input[name='section-name']").val().trim();

            if (confirm(`By deleting the section "${sectionName}", all parts inside that section would be removed. Are you sure?`)) {
                row.remove();
            }
        });

        $(document).on("input blur", "input[name^='section-width'], input[name^='section-height'], input[name^='bin-section']", function () {
            validateBounds($(this), parseInt($(this).attr("min"), 10), parseInt($(this).attr("max"), 10));
        });

        $(document).on("click", "#submitBtn", function () {
            var isValid = true;
            var sectionList = [];

            var inventoryName = $('#inventoryName').val().trim();
            if (!inventoryName) {
                alert('Inventory Name is required. Please enter a name.');
                $('#inventoryName').focus();
                return;
            }

            $("#sectionlist tbody tr").each(function () {
                var row = $(this);
                var width = parseInt(row.find("input[name^='section-width']").val(), 10);
                var height = parseInt(row.find("input[name^='section-height']").val(), 10);
                var subspaceCount = parseInt(row.find("input[name^='bin-section']").val(), 10);
                var sectionName = row.find("input[name^='section-name']").val().trim();

                if (width < minSectionWidth || width > maxSectionWidth) {
                    alert(`Width must be between ${minSectionWidth} and ${maxSectionWidth}.`);
                    isValid = false;
                    return false;
                }
                if (height < minSectionHeight || height > maxSectionHeight) {
                    alert(`Height must be between ${minSectionHeight} and ${maxSectionHeight}.`);
                    isValid = false;
                    return false;
                }
                if (subspaceCount < minSubspace || subspaceCount > maxSubspace) {
                    alert(`Subspace Count must be between ${minSubspace} and ${maxSubspace}.`);
                    isValid = false;
                    return false;
                }

                sectionList.push({
                    Id: row.attr("id"),
                    SectionName: sectionName,
                    Width: width,
                    Height: height,
                    SubspaceCount: subspaceCount
                });
            });

            if (!isValid) return;

            // Check for duplicate section names
            var sectionNames = sectionList.map(s => s.SectionName);
            var duplicates = sectionNames.filter((name, index, self) => self.indexOf(name) !== index);

            if (duplicates.length > 0) {
                alert(`Duplicate section names found: ${duplicates.join(', ')}. Please ensure section names are unique.`);
                return;
            }

            $.ajax({
                type: "POST",
                url: `/dashboard/inventory?handler=SubmitForm&inventoryName=${encodeURIComponent(inventoryName)}`,
                contentType: 'application/json',
                data: JSON.stringify(sectionList),
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: function (response) {
                    console.log('Data saved successfully:', response);
                    alert('Data submitted successfully.');
                    location.reload();
                },
                error: function (error) {
                    console.error('Error occurred:', error);
                    alert('Error occurred. Please try again later.');
                }
            });
        });

        $(document).on("click", "#loadInventoryBtn", function () {
            $.ajax({
                url: "/dashboard/inventory?handler=InventorySummary", // Adjust "YourPageName" to your Razor Page's file name (without extension)
                method: "POST",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                contentType: "application/json", // Since there's no body in the POST, contentType can be adjusted as needed.
                success: function (data) {
                    if (data.isSuccess) {
                        const tableBody = $("#inventorySummaryTableBody");
                        tableBody.empty(); // Clear existing rows

                        // Populate table rows with data
                        if (data.result && data.result.length > 0) {
                            data.result.forEach(item => {
                                const row = `
                                <tr>
                                    <td>${item.partNumber}</td>
                                    <td>${item.section}</td>
                                    <td>${item.coordinateX}</td>
                                    <td>${item.coordinateY}</td>
                                </tr>
                            `;
                                tableBody.append(row);
                            });
                        } else {
                            alert('No inventory data found.');
                        }
                    } else {
                        alert(data.message || 'Failed to load inventory summary.');
                    }
                },
                error: function (xhr, status, error) {
                    console.error("Error fetching inventory summary:", error);
                    alert("Failed to load inventory summary.");
                }
            });
        });


    });
</script>





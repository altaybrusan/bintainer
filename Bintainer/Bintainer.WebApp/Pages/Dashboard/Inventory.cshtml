@page "/dashboard/inventory"
@using System.Text.Json;
@model InventoryModel
@{
}
@Html.AntiForgeryToken()
<link rel="stylesheet" href="~/css/hierarchy-select.min.css">
<link rel="stylesheet" href="~/css/autocomplete.css">
<style>
    .button-row {
        display: flex;
        align-items: center; /* Vertically center content */
        height: 30px; /* Set height to 30px */
        border-radius: 0; /* Sharp corners for button */
        margin-right: 10px; /* Add margin between button and select */
        font-size: 14px; /* Reduce font size */
    }

    .button-row:active,
    .button-row:focus {
            outline: none; /* Remove outline when button is focused */
    }

</style>
<form id="form1" runat="server">
    <div class="container">
        <h2>Inventory</h2>
        <hr />
        <div class="row align-items-center">
            <div class="col-md-2">
                <label for="inventoryName" class="form-label">Inventory Name</label>
                <label class="form-label">Admin</label>
            </div>
            <div class="col-md-4">
                <input type="text" class="form-control input-sharp" id="inventoryName" value="@Model.InventoryName" placeholder="Inventory Name" required />
                <input type="text" class="form-control input-sharp" value="@User.Identity?.Name" disabled="disabled" />
            </div>
        </div>

        <h2>Section List</h2>
        <hr />
        <div class="row">
            <div class="col-9">
                <table class="table" id="sectionlist">
                    <thead>
                        <tr>
                            <th style="width:300px">Section Name</th>
                            <th style="width:150px;">Width</th>
                            <th style="width:150px;">Height</th>
                            <th style="width:150px;">Bin Subspace</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Sections.Count; i++)
                        {
                            <tr id="@Model.Sections[i].Id">
                                <td>
                                    <input type="text" name="section-name" class="form-control input-sharp" value="@Model.Sections[i].SectionName" />
                                </td>
                                <td>
                                    <input type="number" name="section-width" class="form-control input-sharp"
                                           min="@Model.MinSectionWidth" max="@Model.MaxSectionWidth"
                                           value="@(Model.MinSectionWidth)" />
                                </td>
                                <td>
                                    <input type="number" name="section-height" class="form-control input-sharp"
                                           min="@Model.MinSectionHeight" max="@Model.MaxSectionHeight"
                                           value="@(Model.MinSectionHeight)" />
                                </td>
                                <td>
                                    <input type="number" name="bin-section" class="form-control input-sharp"
                                           min="@(Model.MinSubspace)" max="@(Model.MaxSubspace)"
                                           value="1" />
                                </td>
                                <td>
                                    @if (i == 0)
                                    {
                                        <button type="button" class="btn btn-primary btn-xs classAdd">Add</button>
                                    }
                                    else
                                    {
                                        <div class="button-row">
                                            <button type="button" class="btn btn-primary btn-xs classAdd">Add</button>
                                            <button type="button" class="btn btn-danger btn-xs btnDelete">Remove</button>
                                        </div>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>

                </table>
                <div class="mt-5 text-end">
                    <button type="button" id="submitBtn" class="btn btn-primary btn-md">Submit</button>
                </div>
            </div>
        </div>
    </div>
</form>

<script type="text/javascript">
    $(document).ready(function () {
        var minSectionWidth = @Model.MinSectionWidth;
        var maxSectionWidth = @Model.MaxSectionWidth;
        var minSectionHeight = @Model.MinSectionHeight;
        var maxSectionHeight = @Model.MaxSectionHeight;
        var minSubspace = @Model.MinSubspace;
        var maxSubspace = @Model.MaxSubspace;

        function validateBounds(input, min, max) {
            var value = parseInt(input.val(), 10);
            if (isNaN(value)) return; // Ignore NaN values
            if (value < min) {
                input.val(min); // Truncate to minimum
            } else if (value > max) {
                input.val(max); // Truncate to maximum
            }
        }

        $(document).on("click", ".classAdd", function () {
            var rowCount = $('#sectionlist tbody tr').length + 1; // Count existing rows
            var newRow = `<tr id="0" class="inventory-subsection-list">
                                <td><input type="text" name="section-name${rowCount}" class="form-control input-sharp" /></td>
                                <td><input type="number" name="section-width${rowCount}" class="form-control input-sharp" min="${minSectionWidth}" max="${maxSectionWidth}" value="${minSectionWidth}" /></td> <!-- Set default value -->
                                <td><input type="number" name="section-height${rowCount}" class="form-control input-sharp" min="${minSectionHeight}" max="${maxSectionHeight}" value="${minSectionHeight}" /></td> <!-- Set default value -->
                                <td><input type="number" name="bin-section${rowCount}" class="form-control input-sharp" min="${minSubspace}" max="${maxSubspace}" value="${minSubspace}" /></td> <!-- Set default value -->
                                <td>
                                    <div class="button-row">
                                        <button type="button" class="btn btn-primary btn-xs classAdd">Add</button>
                                        <button type="button" class="btn btn-danger btn-xs btnDelete">Remove</button>
                                    </div>
                                </td>
                            </tr>`;
            $('#sectionlist tbody').append(newRow); // Append new row to tbody
        });

        $(document).on("click", ".btnDelete", function () {
            $(this).closest("tr").remove();
        });

        // Validate bounds on input and blur events
        $(document).on("input blur", "input[name^='section-width'], input[name^='section-height'], input[name^='bin-section']", function () {
            validateBounds($(this), parseInt($(this).attr("min"), 10), parseInt($(this).attr("max"), 10));
        });

        $(document).on("click", "#submitBtn", function () {
            var isValid = true;
            var sectionList = [];

            // Check if inventoryName is empty
            var inventoryName = $('#inventoryName').val().trim();
            if (!inventoryName) {
                alert('Inventory Name is required. Please enter a name.');
                $('#inventoryName').focus(); // Focus the input for user convenience
                return; // Prevent submission
            }

            $("#sectionlist tbody tr").each(function () {
                var row = $(this);
                var width = parseInt(row.find("input[name^='section-width']").val(), 10);
                var height = parseInt(row.find("input[name^='section-height']").val(), 10);
                var subspaceCount = parseInt(row.find("input[name^='bin-section']").val(), 10);

                // Validate width and height ranges
                if (width < minSectionWidth || width > maxSectionWidth) {
                    alert(`Width must be between ${minSectionWidth} and ${maxSectionWidth}.`);
                    isValid = false; // Prevent submission
                    return false; // Break out of each
                }
                if (height < minSectionHeight || height > maxSectionHeight) {
                    alert(`Height must be between ${minSectionHeight} and ${maxSectionHeight}.`);
                    isValid = false; // Prevent submission
                    return false; // Break out of each
                }
                if (subspaceCount < minSubspace || subspaceCount > maxSubspace) {
                    alert(`Subspace Count must be between ${minSubspace} and ${maxSubspace}.`);
                    isValid = false; // Prevent submission
                    return false; // Break out of each
                }

                sectionList.push({
                    Id: row.attr("id"),
                    SectionName: row.find("input[name^='section-name']").val(),
                    Width: width,
                    Height: height,
                    SubspaceCount: subspaceCount,
                    Inventory:null,
                    Bins:null
                });
            });

            if (!isValid) return; // Only proceed if valid

            // Proceed with AJAX submission
            $.ajax({
                type: "POST",
                url: `/dashboard/inventory?handler=SubmitForm&inventoryName=${encodeURIComponent(inventoryName)}`,
                contentType: 'application/json',
                data: JSON.stringify(sectionList),
                beforeSend: function (xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN", $('input:hidden[name="__RequestVerificationToken"]').val());
                },
                success: function (response) {
                    console.log('Data saved successfully:', response);
                    alert('Data submitted successfully.');
                },
                error: function (xhr, status, error) {
                    console.error('Error saving data:', status, error);
                    alert('Failed to save data.');
                }
            });
        });

    });
</script>




